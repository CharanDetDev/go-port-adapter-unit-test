// Code generated by MockGen. DO NOT EDIT.
// Source: person_service_domain.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	model "github.com/CharanDetDev/go-port-adapter-unit-test/model"
	gomock "github.com/golang/mock/gomock"
)

// MockPersonService is a mock of PersonService interface.
type MockPersonService struct {
	ctrl     *gomock.Controller
	recorder *MockPersonServiceMockRecorder
}

// MockPersonServiceMockRecorder is the mock recorder for MockPersonService.
type MockPersonServiceMockRecorder struct {
	mock *MockPersonService
}

// NewMockPersonService creates a new mock instance.
func NewMockPersonService(ctrl *gomock.Controller) *MockPersonService {
	mock := &MockPersonService{ctrl: ctrl}
	mock.recorder = &MockPersonServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonService) EXPECT() *MockPersonServiceMockRecorder {
	return m.recorder
}

// DeletePerson mocks base method.
func (m *MockPersonService) DeletePerson(personID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerson", personID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockPersonServiceMockRecorder) DeletePerson(personID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockPersonService)(nil).DeletePerson), personID)
}

// GetPersonWithPersonID mocks base method.
func (m *MockPersonService) GetPersonWithPersonID(personId int, person *model.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonWithPersonID", personId, person)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPersonWithPersonID indicates an expected call of GetPersonWithPersonID.
func (mr *MockPersonServiceMockRecorder) GetPersonWithPersonID(personId, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonWithPersonID", reflect.TypeOf((*MockPersonService)(nil).GetPersonWithPersonID), personId, person)
}

// InsertPerson mocks base method.
func (m *MockPersonService) InsertPerson(newPerson *model.PersonRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPerson", newPerson)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPerson indicates an expected call of InsertPerson.
func (mr *MockPersonServiceMockRecorder) InsertPerson(newPerson interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPerson", reflect.TypeOf((*MockPersonService)(nil).InsertPerson), newPerson)
}

// UpdatePerson mocks base method.
func (m *MockPersonService) UpdatePerson(newPerson *model.PersonRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", newPerson)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockPersonServiceMockRecorder) UpdatePerson(newPerson interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockPersonService)(nil).UpdatePerson), newPerson)
}
