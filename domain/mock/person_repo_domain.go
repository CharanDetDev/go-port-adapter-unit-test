// Code generated by MockGen. DO NOT EDIT.
// Source: person_repo_domain.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	model "github.com/CharanDetDev/go-port-adapter-unit-test/model"
	gomock "github.com/golang/mock/gomock"
)

// MockPersonRepo is a mock of PersonRepo interface.
type MockPersonRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPersonRepoMockRecorder
}

// MockPersonRepoMockRecorder is the mock recorder for MockPersonRepo.
type MockPersonRepoMockRecorder struct {
	mock *MockPersonRepo
}

// NewMockPersonRepo creates a new mock instance.
func NewMockPersonRepo(ctrl *gomock.Controller) *MockPersonRepo {
	mock := &MockPersonRepo{ctrl: ctrl}
	mock.recorder = &MockPersonRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonRepo) EXPECT() *MockPersonRepoMockRecorder {
	return m.recorder
}

// DeletePerson mocks base method.
func (m *MockPersonRepo) DeletePerson(personID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerson", personID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockPersonRepoMockRecorder) DeletePerson(personID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockPersonRepo)(nil).DeletePerson), personID)
}

// GetPersonWithPersonID mocks base method.
func (m *MockPersonRepo) GetPersonWithPersonID(personId int, person *model.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonWithPersonID", personId, person)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPersonWithPersonID indicates an expected call of GetPersonWithPersonID.
func (mr *MockPersonRepoMockRecorder) GetPersonWithPersonID(personId, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonWithPersonID", reflect.TypeOf((*MockPersonRepo)(nil).GetPersonWithPersonID), personId, person)
}

// InsertPerson mocks base method.
func (m *MockPersonRepo) InsertPerson(newPerson *model.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPerson", newPerson)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPerson indicates an expected call of InsertPerson.
func (mr *MockPersonRepoMockRecorder) InsertPerson(newPerson interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPerson", reflect.TypeOf((*MockPersonRepo)(nil).InsertPerson), newPerson)
}

// UpdatePerson mocks base method.
func (m *MockPersonRepo) UpdatePerson(newPerson *model.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", newPerson)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockPersonRepoMockRecorder) UpdatePerson(newPerson interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockPersonRepo)(nil).UpdatePerson), newPerson)
}
